stages:
  - build
  - test
  - code_scan
  - container_scan
  - deploy

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE/app:$CI_COMMIT_SHORT_SHA

before_script:
  - echo "Setting up..."

build:
  stage: build
  script:
    - docker build -t $DOCKER_IMAGE ./app
    - docker push $DOCKER_IMAGE

test:
  stage: test
  script:
    - echo "Run unit tests here (if any)"

code_scan:
  stage: scan
  script:
    - sonar-scanner

container_scan:
  stage: container_scan
  script:
    - trivy image --exit-code 0 --severity HIGH,CRITICAL $DOCKER_IMAGE

deploy:
  stage: deploy
  script:
    - echo "Deploy to Kubernetes (via Terraform or kubectl)"

stages:
  - build
  - test
  - scan
  - deploy

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE/app
  SONAR_SCANNER_OPTS: "-Dsonar.projectKey=secure-cicd-devsecops"

before_script:
  - echo "Running pipeline for $CI_PROJECT_NAME"

build_app:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $DOCKER_IMAGE:latest ./app
    - docker images

sonarqube_scan:
  stage: scan
  image:
    name: sonarsource/sonar-scanner-cli
    entrypoint: [""]
  script:
    - sonar-scanner

trivy_scan:
  stage: scan
  image: aquasec/trivy:latest
  script:
    - trivy image $DOCKER_IMAGE:latest || true

zap_scan:
  stage: scan
  image: owasp/zap2docker-stable
  script:
    - zap-baseline.py -t http://your_app_url:port -r zap-report.html

terraform_deploy:
  stage: deploy
  image: hashicorp/terraform:light
  before_script:
    - cd terraform
    - terraform init
  script:
    - terraform validate
    - terraform plan -out=tfplan
    - terraform apply -auto-approve tfplan
